<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Redis集群的搭建</title>
    <link href="/post/200117/"/>
    <url>/post/200117/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis集群的搭建"><a href="#Redis集群的搭建" class="headerlink" title="Redis集群的搭建"></a>Redis集群的搭建</h1><h2 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h2><pre><code>安装环境    CentOS 7.6开发工具    Xshell Xftp</code></pre><h2 id="安装Ruby"><a href="#安装Ruby" class="headerlink" title="安装Ruby"></a>安装Ruby</h2><pre><code class="yml"># 安装rubyyum install ruby# 安装rubygemsyum install rubygems# 安装Ruby的redis接口gem install redis</code></pre><p>如果出现<code>ERROR: Error installing redis redis requires Ruby version &gt;=2.3.0</code>这个错误</p><p><strong><em>就是Ruby版本过低的问题</em></strong></p><pre><code class="yml"># 安装curlyum install curl# 使用curl安装rvmgpg2 --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3curl -L get.rvm.io | bash -s stablefind / -name rvm# 使rvm生效source /usr/local/rvm/scripts/rvm# 可以查看rvm中所有ruby版本rvm list known# 安装 2.3.4 版本rvm install 2.3.4rvm use 2.3.4# 移除系统默认版本号rvm remove 2.0.0# 查看版本ruby --version# 继续安装Ruby的redis接口gem install redis</code></pre><h2 id="下载Redis"><a href="#下载Redis" class="headerlink" title="下载Redis"></a>下载Redis</h2><pre><code class="yml"># 获取Redis资源wget http://download.redis.io/releases/redis-4.0.8.tar.gz# 解压tar xzvf redis-4.0.8.tar.gz# 进入目录cd redis-4.0.8# 指定安装位置make install PREFIX=/usr/local/src/redis# 将解压缩包下的Redis配置文件redis.conf拷贝到安装目录的bin目录下cp ./redis.conf ../redis/bin# 然后把文件夹改名为7001mv redis 7001# 复制5次 端口为7001 - 7006cp -a 7001 7002</code></pre><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p><strong><em>修改每个文件夹的 redis.conf 文件</em></strong></p><p><code>修改每个Redis绑定的IP地址</code><br><img src="https://img.elebu.cn/20011701.png" srcset="/img/loading.gif" alt=""></p><p><code>修改每个Redis的端口地址，分别从7001 - 7006</code><br><img src="https://img.elebu.cn/20011702.png" srcset="/img/loading.gif" alt=""></p><p><code>把每个Redis的集群设置打开</code><br><img src="https://img.elebu.cn/20011703.png" srcset="/img/loading.gif" alt=""></p><p><code>把每个Redis改为后台运行</code><br><img src="https://img.elebu.cn/20011704.png" srcset="/img/loading.gif" alt=""></p><pre><code class="yml"># 进入每一个文件夹 逐一启动Redis./redis-server ./redis.conf# 查看Redis的运行状态ps -ef|grep redis</code></pre><p><img src="https://img.elebu.cn/20011705.png" srcset="/img/loading.gif" alt=""></p><h2 id="文件夹结构"><a href="#文件夹结构" class="headerlink" title="文件夹结构"></a>文件夹结构</h2><p><img src="https://img.elebu.cn/20011706.png" srcset="/img/loading.gif" alt=""></p><p>可能会出现<code>permission denied</code>的问题,给<code>redis-trib.rb</code>赋予权限就行了,<code>chmod 777redis-trib.rb</code></p><pre><code class="yml"># 将6个Redis加入集群./redis-trib.rb create --replicas 1 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005 127.0.0.1:7006# 使用客户端进入 7001 端口./redis-cli -p 7001# 查看集群状态CLUSTER NODES</code></pre><p><img src="https://img.elebu.cn/20011707.png" srcset="/img/loading.gif" alt=""></p><p><strong><em>暂时先这样····</em></strong></p>]]></content>
    
    
    <categories>
      
      <category>集群</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CentOS</tag>
      
      <tag>集群</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis的安装</title>
    <link href="/post/200108/"/>
    <url>/post/200108/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis的安装"><a href="#Redis的安装" class="headerlink" title="Redis的安装"></a>Redis的安装</h1><h2 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h2><pre><code>安装环境    CentOS 7.6开发工具    Xshell 6</code></pre><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><pre><code class="shell"># 获取Redis资源wget http://download.redis.io/releases/redis-4.0.8.tar.gz# 解压tar xzvf redis-4.0.8.tar.gz# 安装cd redis-4.0.8makecd srcmake install PREFIX=/usr/local/redis# 移动配置文件到安装目录下cd ../mkdir /usr/local/redis/etcmv redis.conf /usr/local/redis/etc# 配置Redis为后台启动vi /usr/local/redis/etc/redis.conf# 开启线程守护 修改为yesdaemonize yes# 将Redis加入到开机启动vi /etc/rc.local# 最后添加一行/usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf# 开启redis/usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf</code></pre><p><strong><em>配置完成</em></strong></p>]]></content>
    
    
    <categories>
      
      <category>部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>部署</tag>
      
      <tag>CentOS</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx的安装</title>
    <link href="/post/191211/"/>
    <url>/post/191211/</url>
    
    <content type="html"><![CDATA[<h1 id="Nginx的安装"><a href="#Nginx的安装" class="headerlink" title="Nginx的安装"></a>Nginx的安装</h1><h2 id="快速快速"><a href="#快速快速" class="headerlink" title="快速快速"></a>快速快速</h2><blockquote><p>接上一篇博客，Nginx的安装</p></blockquote><p><strong><em>开始前请确认<code>gcc g++</code>开发类库是否装好</em></strong></p><pre><code class="yaml"># 更新yumyum update# 安装gcc等各种依赖yum install -y gcc pcre pcre-devel openssl openssl-devel gd gd-devel</code></pre><pre><code class="yaml"># 进入src目录下载nginxcd /usr/local/src# 下载wget http://nginx.org/download/nginx-1.9.12.tar.gz# 解压tar -xvf nginx-1.9.12.tar.gz# 改个名字mv nginx-1.9.12 nginx# 进入nginx目录进行configure配置./configure# 编译安装make &amp;&amp; make install# 进入sbin目录cd /usr/local/nginx/sbin# 运行nginx./nginx# 关闭nginx./nginx -s stop# 查看状态ps -ef | grep nginx </code></pre><blockquote><p>运行成功效果图</p></blockquote><p><img src="https://img.elebu.cn/19121101.png" srcset="/img/loading.gif" alt="效果图"></p><h2 id="开启HTTPS"><a href="#开启HTTPS" class="headerlink" title="开启HTTPS"></a>开启HTTPS</h2><pre><code class="yaml"># 进入源码包 安装ssl模块./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module# 编译 不需要make install 否则就覆盖了make# 备份原来的Nginxcp /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx_bak# 将刚才编译好的Nginx覆盖原有的Nginx,需要先暂停Nginxcp ./objs/nginx /usr/local/nginx/sbin/# 查看安装情况/usr/local/nginx/sbin/nginx -V</code></pre><p><img src="https://img.elebu.cn/20010801.png" srcset="/img/loading.gif" alt="ssl模块安装图"></p><pre><code class="yaml">server{    listen 80;    listen       443 ssl;    server_name localhost;    charset      urf-8;    client_max_body_size 10M;    ssl_certificate      .pem 文件结尾的绝对路径;    ssl_certificate_key  .key 文件结尾的绝对路径;    ssl_session_timeout 5m;    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;     ssl_protocols TLSv1 TLSv1.1 TLSv1.2;    ssl_prefer_server_ciphers on;          index index.php index.html index.htm default.php default.htm default.html;    root  /usr/local/nginx/html/;    location / {            alias   /usr/local/nginx/html/;                try_files $uri $uri/  /index.html;    }}</code></pre><p><code>/usr/local/nginx/sbin/nginx -t</code>检验配置是否正确</p><p><strong><em>暂时这样</em></strong></p>]]></content>
    
    
    <categories>
      
      <category>部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>部署</tag>
      
      <tag>CentOS</tag>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>项目部署</title>
    <link href="/post/191209/"/>
    <url>/post/191209/</url>
    
    <content type="html"><![CDATA[<h1 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h1><h2 id="购买服务器"><a href="#购买服务器" class="headerlink" title="购买服务器"></a>购买服务器</h2><blockquote><p>我选择的是在 <a href="https://www.aliyun.com/" target="_blank" rel="noopener">阿里云</a> 购买云服务器</p></blockquote><p><img src="https://img.elebu.cn/19120901.png" srcset="/img/loading.gif" alt="ECS"></p><blockquote><p>我现在是测试，所以买的是<a href="https://promotion.aliyun.com/ntms/act/campus2018.html?spm=5176.10695662.1244717.1.641e5a069KxmRy&aly_as=qcP6SCP4" target="_blank" rel="noopener">学生机</a></p></blockquote><p><img src="https://img.elebu.cn/19120902.png" srcset="/img/loading.gif" alt="轻应用服务器"></p><blockquote><p>购买后进入控制台给服务器装个系统，我选择的是CentOS 7.3</p></blockquote><p><img src="https://img.elebu.cn/19120903.png" srcset="/img/loading.gif" alt="系统"></p><blockquote><p>系统装好后去服务器控制台设置服务器密码</p></blockquote><p><img src="https://img.elebu.cn/19120904.png" srcset="/img/loading.gif" alt="设置密码"></p><h2 id="装软件"><a href="#装软件" class="headerlink" title="装软件"></a>装软件</h2><blockquote><p>下载<a href="https://xshell.en.softonic.com/" target="_blank" rel="noopener">终端</a>还有<a href="https://www.netsarang.com/zh/xftp/" target="_blank" rel="noopener">FTP</a>，软件都是个人版免费</p></blockquote><p><img src="https://img.elebu.cn/19120905.png" srcset="/img/loading.gif" alt="软件"></p><blockquote><p>打开Xshell 新建会话</p></blockquote><p><img src="https://img.elebu.cn/19120906.png" srcset="/img/loading.gif" alt="Xshell"></p><blockquote><p>输入用户名和密码</p></blockquote><p><img src="https://img.elebu.cn/19120907.png" srcset="/img/loading.gif" alt="输入用户名"></p><p><img src="https://img.elebu.cn/19120908.png" srcset="/img/loading.gif" alt="输入密码"></p><blockquote><p>登录成功</p></blockquote><p><img src="https://img.elebu.cn/19120909.png" srcset="/img/loading.gif" alt="输入密码"></p><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><h3 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h3><pre><code class="yaml"># 查看阿里云所有的JDKyum list java*# 安装JDK1.8版本yum install java-1.8.0-openjdk*# 安装后查看一下版本java -version</code></pre><p><img src="https://img.elebu.cn/19120910.png" srcset="/img/loading.gif" alt="JDK"></p><blockquote><p>通过这种方式不需要自己配置java环境变量，也是一个比较方便的方式</p></blockquote><h3 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h3><pre><code class="yaml"># 一般软件都放在这个目录下面cd /usr/local/src/# 使用wget下载官方yum源的rpm包wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm# 先卸载原包mariadb-libsyum remove mariadb-libs -y# 使用rpm安装mysql5.7rpm -ivh mysql57-community-release-el7-11.noarch.rpm#再次使用yum来安装mysql-server  装的过程中它会提示是否继续安装之类的,一直点击y就可以了yum -y install mysql-community-server# 查看mysql是否是运行状态service mysqld status# 重启服务        service mysqld restart# 设置mysqld服务开机自启动systemctl enable mysqld        # 随机一个密码进行登录 下面画红框的cat /var/log/mysqld.log|grep &#39;A temporary password&#39;</code></pre><p><img src="https://img.elebu.cn/19120911.png" srcset="/img/loading.gif" alt="随机密码"></p><blockquote><p>MySql配置</p></blockquote><pre><code class="yaml"># 进入数据库控制台mysql -uroot -p# 设置密码策略组mysql&gt; set global validate_password_policy=0;mysql&gt; set global validate_password_length=1;mysql&gt; set global validate_password_mixed_case_count=2;# 修改密码set password for &#39;root&#39;@&#39;localhost&#39; =password(&#39;12345678&#39;);# 查看当前msyql的编码show variables like &#39;character_set%&#39;;# 修改编码为UTF-8vim /etc/my.cnf# 在[MySql]结束位置添加：character_set_server=utf8# CentOS MySql 默认是区分大小写的，修改成不区分大小写lower_case_table_names=1# 修改完之后,重启MySqlservice mysqld restart# 打开连接数据库的权限GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456&#39; WITH GRANT OPTION;# 刷新权限FLUSH PRIVILEGES;# 重启mysqlservice mysqld restart</code></pre><blockquote><p>还需要在控制台中添加防火墙规则或者关闭防火墙</p></blockquote><p><img src="https://img.elebu.cn/19120912.png" srcset="/img/loading.gif" alt="开启防火墙"></p><pre><code class="yaml"># 查看防火墙状态systemctl status firewalld.service# 开启防火墙systemctl start firewalld.service# 关闭防火墙systemctl stop firewalld.service</code></pre><blockquote><p>用Navicat连接,使用root用户登录出现<code>1045</code>错误时请创建一个用户登录</p></blockquote><pre><code class="yaml"># 创建新用户 testcreate user test identified by &#39;123456&#39;;# 给 test 分配所有的权限grant all on *.* to &#39;test&#39;@&#39;%&#39;;</code></pre><h3 id="TomCat"><a href="#TomCat" class="headerlink" title="TomCat"></a>TomCat</h3><p><strong><em>如果是Boot项目直接打成jar包然后输入: java -jar 命令就可以运行</em></strong></p><blockquote><p>如果不是使用以下命令安装</p></blockquote><pre><code class="yaml"># 使用wget命令安装wget http://mirror.bit.edu.cn/apache/tomcat/tomcat-8/v8.5.50/bin/apache-tomcat-8.5.50.tar.gz# 解压tar -zxvf apache-tomcat-8.5.50.tar.gz # 安装好后把项目放到tomcat的/webapps/ROOT/目录下# 然后到bin目录下 ./startup.sh  启动服务</code></pre><blockquote><p>如果使用的是云服务器可能会有一个问题 <a href="https://www.jianshu.com/p/576d356dc163" target="_blank" rel="noopener">详情</a></p></blockquote><blockquote><p>解决方案:安装一个熵服务</p></blockquote><pre><code class="yaml"># 安装yum install rng-tools# 启动服务systemctl start rngd</code></pre><h3 id="NodeJs"><a href="#NodeJs" class="headerlink" title="NodeJs"></a>NodeJs</h3><pre><code class="yaml"># 使用wget下载wget https://nodejs.org/dist/v12.13.1/node-v12.13.1-linux-x64.tar.gz#然后解压tar zxvf node-v12.13.1-linux-x64.tar.gz# 修改名字mv node-v12.13.1-linux-x64 node# 配置环境变量vim /etc/profile</code></pre><p><img src="https://img.elebu.cn/19120913.png" srcset="/img/loading.gif" alt="nodejs环境变量"></p><pre><code class="yaml"># 设置阿里云镜像npm config set registry http://registry.npm.taobao.org/# 运行项目 然后按CTRL+d 就行了nohup npm run dev &amp;运行的命令前必须加nohup 后面加 &amp;因为不加这个,终端关掉时服务就会自动关了</code></pre><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><blockquote><p>这个下一次写</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>部署</tag>
      
      <tag>CentOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java日期转年龄</title>
    <link href="/post/191203/"/>
    <url>/post/191203/</url>
    
    <content type="html"><![CDATA[<h1 id="Java日期转年龄"><a href="#Java日期转年龄" class="headerlink" title="Java日期转年龄"></a>Java日期转年龄</h1><h1 id="时间转年龄"><a href="#时间转年龄" class="headerlink" title="时间转年龄"></a>时间转年龄</h1><p><strong><em>直接上代码</em></strong></p><pre><code class="java">public class AgeUtil {    public static int getAgeByBirth(Date birthDay) throws ParseException {        int age = 0;        Calendar cal = Calendar.getInstance();        if (cal.before(birthDay)) {            throw new IllegalArgumentException(&quot;出生日期晚于当前时间，无法计算!&quot;);        }        //当前年份        int yearNow = cal.get(Calendar.YEAR);        //当前月份        int monthNow = cal.get(Calendar.MONTH);        //当前日期        int dayOfMonthNow = cal.get(Calendar.DAY_OF_MONTH);        cal.setTime(birthDay);        int yearBirth = cal.get(Calendar.YEAR);        int monthBirth = cal.get(Calendar.MONTH);        int dayOfMonthBirth = cal.get(Calendar.DAY_OF_MONTH);        //计算整岁数        age = yearNow - yearBirth;        if (monthNow &lt;= monthBirth) {            if (monthNow == monthBirth) {                if (dayOfMonthNow &lt; dayOfMonthBirth) {                    //当前日期在生日之前，年龄减一                    age--;                }            } else {                //当前月份在生日之前，年龄减一                age--;            }        }        return age;    }}</code></pre>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot快速入门</title>
    <link href="/post/191125/"/>
    <url>/post/191125/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot快速入门"><a href="#SpringBoot快速入门" class="headerlink" title="SpringBoot快速入门"></a>SpringBoot快速入门</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://spring.io/projects/spring-boot/" target="_blank" rel="noopener">官方文档</a></p><blockquote><p>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化Spring应用的初始搭建以及开发过程。使用Spring boot以后,搭建一个spring应用和开发变得很简单。</p></blockquote><blockquote><p>Springboot就是一些写好了maven的模块，我们在使用SPring就不需以传统的方式来用，只需要以maven导入对应的springboot模块，就能完成一大堆操作。简单的说，它使用maven的方式对Spring应用开发进行进一步封装和简化。</p></blockquote><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h3 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h3><pre><code>开发环境JDK    1.8项目管理工具    Maven开发工具    Eclipse/idea</code></pre><h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><pre><code class="xml">&lt;!--Spring Boot 父类包--&gt;&lt;parent&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;    &lt;version&gt;2.0.5.RELEASE&lt;/version&gt;&lt;/parent&gt;</code></pre><pre><code class="xml">&lt;dependencies&gt;    &lt;!--导入web包--&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;</code></pre><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p><strong><em>项目结构</em></strong><br><img src="https://img.elebu.cn/19112501.png" srcset="/img/loading.gif" alt="结构图"></p><p><strong><em>Controller</em></strong></p><pre><code class="java">@RestControllerpublic class HelloController {    @RequestMapping(&quot;/&quot;)    public String hello(){        return &quot;Hello World!&quot;;    }}</code></pre><p><strong><em>启动类</em></strong></p><pre><code class="java">@SpringBootApplicationpublic class RunApp {    public static void main(String[] args) {        SpringApplication.run(RunApp.class,args);        System.err.println(&quot;项目启动成功&quot;);    }}</code></pre><p><strong><em>测试结果</em></strong><br><img src="https://img.elebu.cn/19112502.png" srcset="/img/loading.gif" alt="结构图"></p><h3 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h3><blockquote><p>Spring-boot-devtools实现热部署功能</p></blockquote><p><strong><em>pom添加依赖</em></strong></p><pre><code class="xml">&lt;!--热部署--&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;    &lt;optional&gt;true&lt;/optional&gt;&lt;/dependency&gt;</code></pre><pre><code class="xml">&lt;build&gt;    &lt;plugins&gt;        &lt;!--可执行包 内置tomcat 可执行 --&gt;        &lt;plugin&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;        &lt;/plugin&gt;    &lt;/plugins&gt;&lt;/build&gt;</code></pre><p><strong><em>还需要开启自动编译</em></strong></p><p><img src="https://img.elebu.cn/19112503.png" srcset="/img/loading.gif" alt="设置"></p><p><strong><em>如果没有效果</em></strong></p><blockquote><p>请按Ctrl+Shift+Alt+/</p></blockquote><p><img src="https://img.elebu.cn/19112504.png" srcset="/img/loading.gif" alt="设置2"></p><p><img src="https://img.elebu.cn/19112505.png" srcset="/img/loading.gif" alt="设置3"></p><p>有时候长时间没有自动编译，手动编译一下</p>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>SpringBoot</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>